// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.0.0
//      Runtime Version:2.0.50727.4927
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Steckbrett.SpecsSupport.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Assertions")]
    [NUnit.Framework.CategoryAttribute("model_mapping")]
    public partial class AssertionsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Assertions", "", new string[] {
                        "model_mapping"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FirstName"});
            table1.AddRow(new string[] {
                        "1",
                        "A"});
            table1.AddRow(new string[] {
                        "2",
                        "B"});
            table1.AddRow(new string[] {
                        "3",
                        "C"});
            testRunner.Given("the following instances of Customer:", ((string)(null)), table1);
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Counting 0 examples")]
        public virtual void Counting0Examples()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Counting 0 examples", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table2.AddRow(new string[] {
                        "99"});
            testRunner.Then("0 of the following instances of Customer should exist:", ((string)(null)), table2);
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Counting 2 examples")]
        public virtual void Counting2Examples()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Counting 2 examples", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table3.AddRow(new string[] {
                        "99"});
            table3.AddRow(new string[] {
                        "2"});
            table3.AddRow(new string[] {
                        "1"});
            testRunner.Then("2 of the following instances of Customer should exist:", ((string)(null)), table3);
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Any example should exist")]
        public virtual void AnyExampleShouldExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Any example should exist", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName"});
            table4.AddRow(new string[] {
                        "X"});
            table4.AddRow(new string[] {
                        "C"});
            table4.AddRow(new string[] {
                        "Z"});
            testRunner.Then("any of the following instances of Customer should exist:", ((string)(null)), table4);
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("All examples should exist")]
        public virtual void AllExamplesShouldExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All examples should exist", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName"});
            table5.AddRow(new string[] {
                        "B"});
            table5.AddRow(new string[] {
                        "C"});
            table5.AddRow(new string[] {
                        "A"});
            testRunner.Then("all of the following instances of Customer should exist:", ((string)(null)), table5);
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No example should exist")]
        public virtual void NoExampleShouldExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No example should exist", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName"});
            table6.AddRow(new string[] {
                        "X"});
            table6.AddRow(new string[] {
                        "Y"});
            table6.AddRow(new string[] {
                        "Z"});
            testRunner.Then("any of the following instances of Customer should not exist:", ((string)(null)), table6);
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
