// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.2.0.0
//      Runtime Version:2.0.50727.4927
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Steckbrett.SpecsSupport.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AutoMapper generation")]
    [NUnit.Framework.CategoryAttribute("model_mapping")]
    public partial class AutoMapperGenerationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en"), "AutoMapper generation", "In order to create beautiful feature specifications\r\nAs a developer using SpecFlo" +
                    "w\r\nI want to map table rows to custom objects", new string[] {
                        "model_mapping"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping table to Customer")]
        public virtual void MappingTableToCustomer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping table to Customer", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName"});
            table1.AddRow(new string[] {
                        "John",
                        "Doe"});
            testRunner.Given("the following instance of Customer:", ((string)(null)), table1);
            testRunner.Then("I should have a Customer called John Doe");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping consecutive tables to Customer")]
        public virtual void MappingConsecutiveTablesToCustomer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping consecutive tables to Customer", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName"});
            table2.AddRow(new string[] {
                        "John",
                        "Doe"});
            testRunner.Given("the following instance of Customer:", ((string)(null)), table2);
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName"});
            table3.AddRow(new string[] {
                        "Peter",
                        "Smith"});
            testRunner.Given("the following instance of Customer:", ((string)(null)), table3);
            testRunner.Then("I should have 2 instances of Customer");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping self-referencing table to Customer")]
        public virtual void MappingSelf_ReferencingTableToCustomer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping self-referencing table to Customer", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FirstName",
                        "LastName",
                        "Parent"});
            table4.AddRow(new string[] {
                        "1",
                        "John",
                        "Doe",
                        "null"});
            table4.AddRow(new string[] {
                        "2",
                        "John",
                        "Doe",
                        "1"});
            testRunner.Given("the following instance of Customer:", ((string)(null)), table4);
            testRunner.Then("I should have Customer 1 referencing to no parent customer");
            testRunner.And("I should have Customer 2 referencing to parent customer 1");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping tables to Customer and Order, relating Customer by Id")]
        public virtual void MappingTablesToCustomerAndOrderRelatingCustomerById()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping tables to Customer and Order, relating Customer by Id", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table5.AddRow(new string[] {
                        "50"});
            table5.AddRow(new string[] {
                        "99"});
            testRunner.Given("the following instance of Customer:", ((string)(null)), table5);
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Customer"});
            table6.AddRow(new string[] {
                        "5",
                        "99"});
            table6.AddRow(new string[] {
                        "6",
                        "50"});
            table6.AddRow(new string[] {
                        "7",
                        "99"});
            testRunner.Given("the following instance of Order:", ((string)(null)), table6);
            testRunner.Then("I should have the Order 5 related to Customer 99");
            testRunner.And("I should have the Order 6 related to Customer 50");
            testRunner.And("I should have the Order 7 related to Customer 99");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping tables to Order and Details, add to parent list with explicit typing")]
        public virtual void MappingTablesToOrderAndDetailsAddToParentListWithExplicitTyping()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping tables to Order and Details, add to parent list with explicit typing", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table7.AddRow(new string[] {
                        "1"});
            testRunner.Given("the following instance of Order:", ((string)(null)), table7);
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Price",
                        "Quantity"});
            table8.AddRow(new string[] {
                        "150",
                        "2"});
            table8.AddRow(new string[] {
                        "200",
                        "1"});
            testRunner.And("the following instances of Detail added to Details of Order 1:", ((string)(null)), table8);
            testRunner.When("I calculate Order 1 total");
            testRunner.Then("I should get total 500 in Order 1");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping tables to Order and Details, add to parent list with implicit typing")]
        public virtual void MappingTablesToOrderAndDetailsAddToParentListWithImplicitTyping()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping tables to Order and Details, add to parent list with implicit typing", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table9.AddRow(new string[] {
                        "1"});
            testRunner.Given("the following instance of Order:", ((string)(null)), table9);
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Price",
                        "Quantity"});
            table10.AddRow(new string[] {
                        "150",
                        "2"});
            table10.AddRow(new string[] {
                        "200",
                        "1"});
            testRunner.And("the following instances added to Details of Order 1:", ((string)(null)), table10);
            testRunner.When("I calculate Order 1 total");
            testRunner.Then("I should get total 500 in Order 1");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping tables to Order and Details, pass to parent method with explicit typing")]
        public virtual void MappingTablesToOrderAndDetailsPassToParentMethodWithExplicitTyping()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping tables to Order and Details, pass to parent method with explicit typing", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table11.AddRow(new string[] {
                        "1"});
            testRunner.Given("the following instance of Order:", ((string)(null)), table11);
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Price",
                        "Quantity"});
            table12.AddRow(new string[] {
                        "150",
                        "2"});
            table12.AddRow(new string[] {
                        "200",
                        "1"});
            testRunner.And("the following instances of Detail passed to AddDetail of Order 1:", ((string)(null)), table12);
            testRunner.When("I calculate Order 1 total");
            testRunner.Then("I should get total 500 in Order 1");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping tables to Order and Details, pass to parent method with implicit typing")]
        public virtual void MappingTablesToOrderAndDetailsPassToParentMethodWithImplicitTyping()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping tables to Order and Details, pass to parent method with implicit typing", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table13.AddRow(new string[] {
                        "1"});
            testRunner.Given("the following instance of Order:", ((string)(null)), table13);
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Price",
                        "Quantity"});
            table14.AddRow(new string[] {
                        "150",
                        "2"});
            table14.AddRow(new string[] {
                        "200",
                        "1"});
            testRunner.And("the following instances passed to AddDetail of Order 1:", ((string)(null)), table14);
            testRunner.When("I calculate Order 1 total");
            testRunner.Then("I should get total 500 in Order 1");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping from file")]
        public virtual void MappingFromFile()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping from file", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("instances of Customer from file Data\\Customers.gherkin");
            testRunner.Then("I should have 15 instances of Customer");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping consecutively from file")]
        public virtual void MappingConsecutivelyFromFile()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping consecutively from file", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("instances of Customer from file Data\\Customers.gherkin");
            testRunner.And("instances of Customer from file Data\\Customers.gherkin");
            testRunner.Then("I should have 30 instances of Customer");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping from file taking some rows")]
        public virtual void MappingFromFileTakingSomeRows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping from file taking some rows", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("take 2 instances of Customer from file Data\\Customers.gherkin");
            testRunner.Then("I should have 2 instances of Customer");
            testRunner.And("the first instance of Customer should have Id 1");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping from file skipping some rows")]
        public virtual void MappingFromFileSkippingSomeRows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping from file skipping some rows", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("skip 10 instances of Customer from file Data\\Customers.gherkin");
            testRunner.Then("I should have 5 instances of Customer");
            testRunner.And("the first instance of Customer should have Id 11");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping from file skipping and taking some rows")]
        public virtual void MappingFromFileSkippingAndTakingSomeRows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping from file skipping and taking some rows", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("skip 10 and take 2 instances of Customer from file Data\\Customers.gherkin");
            testRunner.Then("I should have 2 instances of Customer");
            testRunner.And("the first instance of Customer should have Id 11");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping from file and passing to method of instance with explicit typing")]
        public virtual void MappingFromFileAndPassingToMethodOfInstanceWithExplicitTyping()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping from file and passing to method of instance with explicit typing", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table15.AddRow(new string[] {
                        "1"});
            testRunner.Given("the following instance of Group:", ((string)(null)), table15);
            testRunner.And("instances of Customer passed to AddCustomer of Group 1 from file Data\\Customers.g" +
                    "herkin");
            testRunner.Then("the Group 1 should have 15 Customers");
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping from file and passing to method of instance with implicit typing")]
        public virtual void MappingFromFileAndPassingToMethodOfInstanceWithImplicitTyping()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping from file and passing to method of instance with implicit typing", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id"});
            table16.AddRow(new string[] {
                        "1"});
            testRunner.Given("the following instance of Group:", ((string)(null)), table16);
            testRunner.And("instances passed to AddCustomer of Group 1 from file Data\\Customers.gherkin");
            testRunner.Then("the Group 1 should have 15 Customers");
            testRunner.CollectScenarioErrors();
        }
    }
}
